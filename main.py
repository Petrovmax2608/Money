from telegram import (
    Update,
    InlineQueryResultArticle,
    InputTextMessageContent,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    InlineQueryHandler,
    MessageHandler,
    filters,
    CallbackContext,
)
import random
import logging
import uuid
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

# URL –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
YES_IMAGE = "https://nklk.ru/dll_image/4738.png"
NO_IMAGE = "https://nklk.ru/dll_image/4739.png"

# URL –¥–ª—è GIF-–∞–Ω–∏–º–∞—Ü–∏–∏ –≤—Ä–∞—â–µ–Ω–∏—è –º–æ–Ω–µ—Ç—ã
COIN_FLIP_GIF = "https://media.giphy.com/media/3o6Zt481isNVuQI1l6/giphy.gif"

async def inline_query(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∑–∞–ø—Ä–æ—Å–æ–≤"""
    try:
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-—Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —Ç–µ–∫—Å—Ç–æ–º "–ü–æ–¥–±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç–∫—É"
        results = [
            InlineQueryResultArticle(
                id=str(uuid.uuid4()),  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
                title="–ü–æ–¥–±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç–∫—É",
                input_message_content=InputTextMessageContent(
                    "–ü–æ–¥–±—Ä–∞—Å—ã–≤–∞–µ–º –º–æ–Ω–µ—Ç–∫—É... ü™ô", parse_mode="HTML"
                ),
            )
        ]

        await update.inline_query.answer(results, cache_time=0)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ inline-–∑–∞–ø—Ä–æ—Å–∞: {e}")
        await update.inline_query.answer([])  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏

async def handle_coin_flip_message(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º '–ü–æ–¥–±—Ä–∞—Å—ã–≤–∞–µ–º –º–æ–Ω–µ—Ç–∫—É...'"""
    if update.message.text == "–ü–æ–¥–±—Ä–∞—Å—ã–≤–∞–µ–º –º–æ–Ω–µ—Ç–∫—É... ü™ô":
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GIF –≤—Ä–∞—â–µ–Ω–∏—è –º–æ–Ω–µ—Ç—ã
            await update.message.reply_animation(
                animation=COIN_FLIP_GIF,
                caption="–ö—Ä—É—Ç–∏–º –º–æ–Ω–µ—Ç–∫—É... üåÄ"
            )

            # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            await asyncio.sleep(1)

            # –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–¥–±—Ä–∞—Å—ã–≤–∞–Ω–∏—è –º–æ–Ω–µ—Ç–∫–∏
            result = random.choice(["yes", "no"])
            image_url = YES_IMAGE if result == "yes" else NO_IMAGE
            title = "–î–∞" if result == "yes" else "–ù–µ—Ç"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
            await update.message.reply_photo(
                photo=image_url,
                caption=f"<b>–ú–æ–Ω–µ—Ç–∫–∞ –≥–æ–≤–æ—Ä–∏—Ç:</b> {title}!",
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")

async def start(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text(
        "–í–≤–µ–¥–∏ @babloro_bot, —á—Ç–æ–±—ã –ø–æ–¥–±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç–∫—É."
    )

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –ó–∞–º–µ–Ω–∏—Ç–µ 'YOUR_TOKEN' –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
    application = ApplicationBuilder().token("7919456091:AAHMc4yNQDvyh_nuTH8MdIiGM-8werbXuNE").build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(InlineQueryHandler(inline_query))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_coin_flip_message))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main()
