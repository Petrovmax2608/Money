from telegram import (
    Update,
    InlineQueryResultArticle,
    InputTextMessageContent,
    InputMediaPhoto,
)
from telegram.ext import ApplicationBuilder, CommandHandler, InlineQueryHandler, CallbackContext
import random
import logging
import uuid
import asyncio  # –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

# URL –¥–ª—è –∑–∞–±–ª—é—Ä–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
YES_IMAGE = "https://nklk.ru/dll_image/4738.png"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ URL –∑–∞–±–ª—é—Ä–µ–Ω–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏ "–î–∞"
NO_IMAGE = "https://nklk.ru/dll_image/4739.png"   # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ URL –∑–∞–±–ª—é—Ä–µ–Ω–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏ "–ù–µ—Ç"

async def inline_query(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∑–∞–ø—Ä–æ—Å–æ–≤"""
    try:
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-—Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —Ç–µ–∫—Å—Ç–æ–º "–ü–æ–¥–±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç–∫—É"
        results = [
            InlineQueryResultArticle(
                id=str(uuid.uuid4()),  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
                title="–ü–æ–¥–±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç–∫—É",
                input_message_content=InputTextMessageContent(
                    "–ü–æ–¥–±—Ä–∞—Å—ã–≤–∞–µ–º –º–æ–Ω–µ—Ç–∫—É... ü™ô", parse_mode="HTML"
                ),  # –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ
            )
        ]

        await update.inline_query.answer(results, cache_time=0)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ inline-–∑–∞–ø—Ä–æ—Å–∞: {e}")
        await update.inline_query.answer([])  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏

async def handle_result(update: Update, context: CallbackContext):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º"""
    try:
        # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        await asyncio.sleep(2)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ 2 —Å–µ–∫—É–Ω–¥—ã

        # –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–¥–±—Ä–∞—Å—ã–≤–∞–Ω–∏—è –º–æ–Ω–µ—Ç–∫–∏
        result = random.choice(["yes", "no"])
        image_url = YES_IMAGE if result == "yes" else NO_IMAGE
        title = "–î–∞" if result == "yes" else "–ù–µ—Ç"

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        await update.effective_message.edit_media(
            media=InputMediaPhoto(media=image_url, caption=f"<b>–ú–æ–Ω–µ—Ç–∫–∞ –≥–æ–≤–æ—Ä–∏—Ç:</b> {title}!", parse_mode="HTML")
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def start(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π @<–∏–º—è_–±–æ—Ç–∞>, —á—Ç–æ–±—ã –ø–æ–¥–±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç–∫—É."
    )

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –ó–∞–º–µ–Ω–∏—Ç–µ 'YOUR_TOKEN' –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
    application = ApplicationBuilder().token("7919456091:AAHMc4yNQDvyh_nuTH8MdIiGM-8werbXuNE").build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(InlineQueryHandler(inline_query))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main()
