import random
import logging
import asyncio
import aiohttp
import uuid
from telegram import (
    Update,
    InlineQueryResultArticle,
    InputTextMessageContent,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    InlineQueryHandler,
    MessageHandler,
    filters,
    CallbackContext,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

# Giphy API
GIPHY_API_KEY = "ebUU78UvD6s5vr09ODs1qGdEsAvAyFfc"
GIPHY_RANDOM_URL = f"https://api.giphy.com/v1/gifs/random?api_key={GIPHY_API_KEY}&tag=coin&rating=g"


async def fetch_random_gif_url():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π GIF —á–µ—Ä–µ–∑ API Giphy"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(GIPHY_RANDOM_URL) as response:
                logger.info(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ –æ—Ç Giphy: {response.status}")
                response.raise_for_status()

                data = await response.json()
                logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç Giphy: {data}")

                if "data" in data and len(data["data"]) > 0:
                    gif_url = data["data"][0]["images"]["original"]["url"]
                    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ GIF: {gif_url}")
                    return gif_url
                else:
                    logger.error("–û—Ç–≤–µ—Ç –æ—Ç Giphy –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤.")
                    return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Giphy API: {e}")
        return None


async def inline_query(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∑–∞–ø—Ä–æ—Å–æ–≤"""
    try:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω inline-–∑–∞–ø—Ä–æ—Å –æ—Ç {update.inline_query.from_user.id}")

        results = [
            InlineQueryResultArticle(
                id=str(uuid.uuid4()),
                title="–ü–æ–¥–±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç–∫—É",
                input_message_content=InputTextMessageContent("–ü–æ–¥–±—Ä–∞—Å—ã–≤–∞–µ–º –º–æ–Ω–µ—Ç–∫—É... ü™ô", parse_mode="HTML"),
            )
        ]

        await update.inline_query.answer(results, cache_time=0, is_personal=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ inline-–∑–∞–ø—Ä–æ—Å–∞: {e}")
        await update.inline_query.answer([])


async def handle_coin_flip_message(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º '–ü–æ–¥–±—Ä–∞—Å—ã–≤–∞–µ–º –º–æ–Ω–µ—Ç–∫—É...'"""
    if update.message.text.strip() == "–ü–æ–¥–±—Ä–∞—Å—ã–≤–∞–µ–º –º–æ–Ω–µ—Ç–∫—É... ü™ô":
        try:
            gif_url = await fetch_random_gif_url()
            if gif_url:
                await update.message.reply_animation(animation=gif_url, caption="–ú–æ–Ω–µ—Ç–∫–∞ –∫—Ä—É—Ç–∏—Ç—Å—è...")

            await asyncio.sleep(2)

            result = random.choice(["–î–∞", "–ù–µ—Ç"])
            await update.message.reply_text(f"–ú–æ–Ω–µ—Ç–∫–∞ –≥–æ–≤–æ—Ä–∏—Ç: {result}!")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–±—Ä–∞—Å—ã–≤–∞–Ω–∏–∏ –º–æ–Ω–µ—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


async def start(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text("–í–≤–µ–¥–∏ @<–∏–º—è_–±–æ—Ç–∞>, —á—Ç–æ–±—ã –ø–æ–¥–±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç–∫—É.")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    application = ApplicationBuilder().token("7919456091:AAHMc4yNQDvyh_nuTH8MdIiGM-8werbXuNE").build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(InlineQueryHandler(inline_query))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_coin_flip_message))

    application.run_polling()


if __name__ == "__main__":
    main()
